#!groovy

node {
    stage('Checkout') {
        checkout scm
    }

    stage('Clean') {
        make "clean"
        stash name: "sources", useDefaultExcludes: false
    }
}

parallel (
    "build": {
        node {
            stage('Build') {
                deleteDir()
                unstash "sources"
                def log = ""
                try {
                    wrap([$class: 'PhabricatorBuildWrapper', createCommit: false, applyToMaster: false, skipForcedClean: false, createBranch: false, pathWithForceFlag: false]) {
                        log = make "once"
                    }
                } finally {
                    if(log.contains("Latexmk: Errors, so I did not complete making targets")) {
                        def reason = sh(script: "rubber-info main.tex", returnStdout: true)
                        writeFile file: '.phabricator-file', text: reason
                        currentBuild.result = "Failure"
                    }
                    step([$class: 'PhabricatorNotifier', commentOnSuccess: false, uberallsEnabled: false, coverageCheck: false, coverageThreshold: 0.0,
                    preserveFormatting: false, commentFile: ".phabricator-file", commentSize: "10000", commentWithConsoleLinkOnFailure: true, customComment: true,
                    processLint: false, lintFile: "", lintFileSize: "10000"])
                    stash name: "built"
                }
                archiveArtifacts 'main.pdf'
            }
        }
    },
)

//Run gradle
String make(def args) {
    if (isUnix()) {
        return sh(script: "make ${args}", returnStdout: true)
    } else {
        return bat(script: "make ${args}", returnStdout: true)
    }
}
